/*
 * generated by Xtext 2.10.0
 */
package com.regnosys.rosetta.formatting2

import com.google.inject.Inject
import com.regnosys.rosetta.rosetta.RosettaChoiceRule
import com.regnosys.rosetta.rosetta.RosettaClass
import com.regnosys.rosetta.rosetta.RosettaClassSynonym
import com.regnosys.rosetta.rosetta.RosettaContainsExpression
import com.regnosys.rosetta.rosetta.RosettaDataRule
import com.regnosys.rosetta.rosetta.RosettaEnumSynonym
import com.regnosys.rosetta.rosetta.RosettaEnumValue
import com.regnosys.rosetta.rosetta.RosettaEnumeration
import com.regnosys.rosetta.rosetta.RosettaExistsExpression
import com.regnosys.rosetta.rosetta.RosettaExpression
import com.regnosys.rosetta.rosetta.RosettaExternalClass
import com.regnosys.rosetta.rosetta.RosettaExternalRegularAttribute
import com.regnosys.rosetta.rosetta.RosettaExternalSynonym
import com.regnosys.rosetta.rosetta.RosettaExternalSynonymSource
import com.regnosys.rosetta.rosetta.RosettaFeatureCall
import com.regnosys.rosetta.rosetta.RosettaGroupByFeatureCall
import com.regnosys.rosetta.rosetta.RosettaHeader
import com.regnosys.rosetta.rosetta.RosettaModel
import com.regnosys.rosetta.rosetta.RosettaRegularAttribute
import com.regnosys.rosetta.rosetta.RosettaRegulatoryReference
import com.regnosys.rosetta.rosetta.RosettaStereotype
import com.regnosys.rosetta.rosetta.RosettaSynonym
import com.regnosys.rosetta.rosetta.RosettaTreeNode
import com.regnosys.rosetta.rosetta.RosettaWorkflowRule
import com.regnosys.rosetta.rosetta.simple.Data
import com.regnosys.rosetta.services.RosettaGrammarAccess
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
import com.regnosys.rosetta.rosetta.simple.Attribute
import com.regnosys.rosetta.rosetta.simple.Condition
import com.regnosys.rosetta.rosetta.simple.Annotation
import com.regnosys.rosetta.rosetta.simple.Constraint
import com.regnosys.rosetta.rosetta.simple.Necessity

class RosettaFormatter extends AbstractFormatter2 {
	
	static val Procedure1<? super IHiddenRegionFormatter> NO_SPACE = [noSpace]
	static val Procedure1<? super IHiddenRegionFormatter> NO_SPACE_LOW_PRIO = [noSpace; lowPriority]
	static val Procedure1<? super IHiddenRegionFormatter> ONE_SPACE = [oneSpace]
	static val Procedure1<? super IHiddenRegionFormatter> ONE_SPACE_PRESERVE_NEWLINE = [setNewLines(0, 0, 1); oneSpace]
	static val Procedure1<? super IHiddenRegionFormatter> NEW_LINE = [setNewLines(1, 1, 2)]
	static val Procedure1<? super IHiddenRegionFormatter> NEW_LINE_LOW_PRIO = [lowPriority; setNewLines(1, 1, 2)]
	static val Procedure1<? super IHiddenRegionFormatter> INDENT = [indent]
	
	@Inject extension RosettaGrammarAccess
	
	def dispatch void format(RosettaModel rosettaModel, extension IFormattableDocument document) {
		rosettaModel.header.format
		formatChild(rosettaModel.elements, document)
	}

	def dispatch void format(RosettaHeader rosettaHeader, extension IFormattableDocument document) {
		rosettaHeader.regionFor.keyword('version').prepend[newLine]
		rosettaHeader.append[setNewLines(2)]
	}

	def dispatch void format(RosettaClass rosettaClass, extension IFormattableDocument document) {
		indentedBraces(rosettaClass, document)
		rosettaClass.getStereotype.format;
		formatChild(rosettaClass.synonyms, document)
		formatChild(rosettaClass.references, document)
		formatChild(rosettaClass.regularAttributes, document)
	}
	
	def dispatch void format(Data ele, extension IFormattableDocument document) {
		ele.regionFor.keyword(dataAccess.typeKeyword_0_0).append(ONE_SPACE)
		ele.regionFor.keyword(dataAccess.extendsKeyword_2_0).append(ONE_SPACE)
		ele.regionFor.keyword(':').prepend(NO_SPACE).append(ONE_SPACE)
		val eleEnd = ele.nextHiddenRegion
		set(
			ele.regionFor.keyword(':').nextHiddenRegion,
			eleEnd,
			INDENT
		)
		ele.synonyms.forEach[
			prepend(NEW_LINE)
		]
		ele.annotations.forEach[
			format
		]
		ele.attributes.forEach[
			prepend(NEW_LINE_LOW_PRIO)
			format
		]
		ele.conditions.forEach[
			prepend(NEW_LINE_LOW_PRIO)
			format
		]
		set(eleEnd, NEW_LINE_LOW_PRIO)
	}

	def dispatch void format(Attribute ele, extension IFormattableDocument document) {
		ele.annotations.forEach[format]
		ele.synonyms.forEach[format]
	}
	
	def dispatch void format(Condition ele, extension IFormattableDocument document) {
		
		ele.annotations.forEach[format]
		ele.regionFor.keyword(':').append(ONE_SPACE_PRESERVE_NEWLINE)
		val eleEnd = ele.nextHiddenRegion
		set(
			ele.regionFor.keyword(':').nextHiddenRegion,
			eleEnd,
			INDENT
		)
		ele.constraint.format
		ele.expression.format
	}
	
	def dispatch void format(Constraint ele, extension IFormattableDocument document) {
		ele.regionFor.keyword(necessityAccess.requiredRequiredKeyword_1_0).prepend(ONE_SPACE_PRESERVE_NEWLINE)
		ele.regionFor.keyword(necessityAccess.optionalOptionalKeyword_0_0).prepend(ONE_SPACE_PRESERVE_NEWLINE)
		ele.regionFor.keyword(
			constraintAccess.choiceKeyword_1
		).surround(ONE_SPACE)
		
		ele.allRegionsFor.keyword(',').prepend(NO_SPACE_LOW_PRIO).append(ONE_SPACE_PRESERVE_NEWLINE)
	}
	
	def dispatch void format(Annotation ele, extension IFormattableDocument document) {
		
	}
	
	def dispatch void format(RosettaRegularAttribute rosettaAttribute, extension IFormattableDocument document) {
		rosettaAttribute.prepend[newLine].append[newLine]
		formatChild(rosettaAttribute.synonyms, document)
		formatChild(rosettaAttribute.references, document)
	}

	def dispatch void format(RosettaStereotype rosettaStereotype, extension IFormattableDocument document) {
		appendWithOneSpace(rosettaStereotype, document)
	}

	def dispatch void format(RosettaRegulatoryReference rosettaRegulatoryReference,
		extension IFormattableDocument document) {
		rosettaRegulatoryReference.prepend[newLine].surround[indent]
	}

	def dispatch void format(RosettaClassSynonym rosettaClassSynonym, extension IFormattableDocument document) {
		singleIndentedLine(rosettaClassSynonym, document)
	}

	def dispatch void format(RosettaSynonym rosettaSynonym, extension IFormattableDocument document) {
		singleIndentedLine(rosettaSynonym, document)
	}

	def dispatch void format(RosettaEnumeration rosettaEnumeration, extension IFormattableDocument document) {
		indentedBraces(rosettaEnumeration, document)
		formatChild(rosettaEnumeration.synonyms, document)
		formatChild(rosettaEnumeration.references, document)
		formatChild(rosettaEnumeration.enumValues, document)
	}

	def dispatch void format(RosettaEnumValue rosettaEnumValue, extension IFormattableDocument document) {
		rosettaEnumValue.prepend[newLine].append[noSpace]
		formatChild(rosettaEnumValue.enumSynonyms, document)
		formatChild(rosettaEnumValue.references, document)
	}

	def dispatch void format(RosettaEnumSynonym rosettaEnumSynonym, extension IFormattableDocument document) {
		rosettaEnumSynonym.prepend[newLine].surround[indent]
	}

	def dispatch void format(RosettaDataRule it, extension IFormattableDocument document) {
		indentedBraces(document)
	}

	def dispatch void format(RosettaContainsExpression rosettaContainsExpression,
		extension IFormattableDocument document) {
	}

	def dispatch void format(RosettaExpression rosettaExpression, extension IFormattableDocument document) {
	}

	def dispatch void format(RosettaWorkflowRule rosettaWorkflowRule, extension IFormattableDocument document) {
	}

	def dispatch void format(RosettaTreeNode rosettaTreeNode, extension IFormattableDocument document) {
	}

	def dispatch void format(RosettaChoiceRule rosettaChoiceRule, extension IFormattableDocument document) {
	}

	def dispatch void format(RosettaExistsExpression rosettaExistsExpression, extension IFormattableDocument document) {
	}

	def dispatch void format(RosettaFeatureCall rosettaAttributeCall, extension IFormattableDocument document) {
	}

	def dispatch void format(RosettaGroupByFeatureCall rosettaGroupByFeatureCall, extension IFormattableDocument document) {
	}

	def dispatch void format(RosettaExternalSynonymSource externalSynonymSource,
		extension IFormattableDocument document) {
		indentedBraces(externalSynonymSource, document)
		formatChild(externalSynonymSource.externalClasses, document)
	}

	def dispatch void format(RosettaExternalClass externalClass, extension IFormattableDocument document) {
		externalClass.regionFor.keyword(':').prepend[noSpace]
		externalClass.prepend[lowPriority; setNewLines(2)]
		formatChild(externalClass.regularAttributes, document)
	}

	def dispatch void format(RosettaExternalRegularAttribute externalRegularAttribute,
		extension IFormattableDocument document) {
		externalRegularAttribute.regionFor.keyword('+').append[oneSpace].prepend[newLine]
		externalRegularAttribute.surround[indent]
		formatChild(externalRegularAttribute.externalSynonyms, document)
	}

	def dispatch void format(RosettaExternalSynonym externalSynonym, extension IFormattableDocument document) {
		externalSynonym.prepend[newLine].surround[indent]
	}

	def void indentedBraces(EObject eObject, extension IFormattableDocument document) {
		val lcurly = eObject.regionFor.keyword('{').prepend[newLine].append[newLine]
		val rcurly = eObject.regionFor.keyword('}').prepend[newLine].append[setNewLines(2)]
		interior(lcurly, rcurly)[highPriority; indent]
	}

	def void formatChild(List<? extends EObject> children, extension IFormattableDocument document) {
		for (EObject child : children) {
			child.format;
		}
	}

	def void singleIndentedLine(EObject eObject, extension IFormattableDocument document) {
		eObject.prepend[newLine].append[newLine].surround[indent]
	}

	def void surroundWithOneSpace(EObject eObject, extension IFormattableDocument document) {
		for (ISemanticRegion w : eObject.allSemanticRegions) {
			w.surround[oneSpace];
		}
	}

	def void appendWithOneSpace(EObject eObject, extension IFormattableDocument document) {
		eObject.regionFor.keyword(',').append[oneSpace]
	}
}
